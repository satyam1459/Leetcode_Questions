# Brute Force O(n^2)

import java.io.*;
import java.util.*;
public class Solution {

    static void smallNumbersThanCurrent(int[] nums,int n){
        int[] res = new int[n];

        for(int  i= 0; i < n ;i ++){
            int count = 0;
            for(int j = 0; j < n; j++){
                if(nums[j] < nums[i])
                    count++;
            }
            res[i] = count;
        }
        for(int i :res)
            System.out.print(i+" ");
    
    }
    public static void main(String[] args) {
         Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[] nums = new int[n];
        for (int i = 0; i < n; i++) {
            nums[i] = sc.nextInt();
        }
        smallNumbersThanCurrent(nums,n);
    }
}

#optimised to O(nlogn) and Space - O(2N)

import java.io.*;
import java.util.*;

public class Solution {

    public static void main(String[] args) {
       Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[] ar = new int[n];
    for(int i = 0 ;i<n;i++) ar[i]=sc.nextInt();
        
        
        //this will take care of count of number less than the number(key)
        HashMap<Integer,Integer> hm = new HashMap<>();
        
        Stack<Integer> st = new Stack<>();      //helps to track duplicates and less numbers
        
        int[] res = new int[n];
        
        for(int i = 0 ; i< n; i++)  res[i] = ar[i];
    
        Arrays.sort(res);
        
        // for(int i : res)
        //     System.out.print(i+" ");
        
        for(int i = 0; i < n ;i++){
            if(st.isEmpty()){
                hm.put(res[i],0);
            }else if(st.peek()== res[i]){
                st.push(res[i]);
                continue;
            }else{
                hm.put(res[i],st.size());
            }
            st.push(res[i]);
        }
        for(int i =0 ;i < n ;i++){
            res[i] = hm.get(ar[i]);
        }
        for(int i : res)
            System.out.print(i+" ");
    }
}
